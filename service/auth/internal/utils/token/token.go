package token

import (
  "context"
  "fmt"
  "time"

  "github.com/Genvekt/kudos-vault/service/auth/internal/config"
  "github.com/Genvekt/kudos-vault/service/auth/internal/converter"
  "github.com/Genvekt/kudos-vault/service/auth/internal/model"
  "github.com/Genvekt/kudos-vault/service/auth/internal/utils"

  "github.com/golang-jwt/jwt"
)

var _ utils.TokenProvider = (*tokenProvider)(nil)

type tokenProvider struct {
  config config.TokenConfig
}

// NewTokenProvider creates token utils based on provided configuration
func NewTokenProvider(ctx context.Context, conf config.TokenConfig) *tokenProvider {
  return &tokenProvider{
    config: conf,
  }
}

// Generate creates new token for user
func (t *tokenProvider) Generate(ctx context.Context, user *model.User) (string, error) {
  claims := converter.UserToClaims(user)

  claims.StandardClaims = jwt.StandardClaims{
    ExpiresAt: time.Now().Add(t.config.TTL()).Unix(),
  }

  jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

  return jwtToken.SignedString(t.config.Secret())
}

// Verify checks tha token was generated by this instance
func (t *tokenProvider) Verify(ctx context.Context, token string) (*model.UserClaims, error) {
  jwtToken, err := jwt.ParseWithClaims(token, &model.UserClaims{}, func(token *jwt.Token) (interface{}, error) {
    _, ok := token.Method.(*jwt.SigningMethodHMAC)
    if !ok {
      return nil, fmt.Errorf("unexpected token signing method")
    }

    return t.config.Secret(), nil
  })
  if err != nil {
    return nil, fmt.Errorf("invalid token: %v", err)
  }

  claims, ok := jwtToken.Claims.(*model.UserClaims)
  if !ok {
    return nil, fmt.Errorf("invalid token claims")
  }

  return claims, nil
}
